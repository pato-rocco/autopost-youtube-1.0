import os
import glob
import asyncio
import json
import requests
import re
import shutil
from datetime import datetime, timedelta
from pathlib import Path
from dotenv import load_dotenv

# Para Discord
import discord
from discord.ext import commands
from discord.ui import Select, View, Button

# Para YouTube API
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from googleapiclient.errors import HttpError

# Carregar vari√°veis do arquivo .env
load_dotenv()

# Configura√ß√µes
PASTA_VIDEOS = "./videos"
SCOPES = ['https://www.googleapis.com/auth/youtube.upload']
CANAL_DISCORD_ID = 1422768699923763382  # ID do canal espec√≠fico
TIMEOUT_INTERACOES = 300  # 5 minutos em segundos

# Carregar vari√°veis de ambiente
DISCORD_BOT_TOKEN = os.getenv('DISCORD_BOT_TOKEN')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')

if not DISCORD_BOT_TOKEN:
    print("‚ùå DISCORD_BOT_TOKEN n√£o encontrado no arquivo .env")
    print("üí° Verifique se o arquivo .env existe e cont√©m DISCORD_BOT_TOKEN")
    exit(1)

if not DEEPSEEK_API_KEY:
    print("‚ö†Ô∏è DEEPSEEK_API_KEY n√£o encontrado no arquivo .env")

# Configura√ß√£o do bot Discord
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

# ========== FUN√á√ÉO VERIFICADORA DO CANAL ==========
def verificar_canal_correto():
    """Decorator para verificar se o comando foi executado no canal correto"""
    async def predicate(ctx):
        if ctx.channel.id != CANAL_DISCORD_ID:
            await ctx.send(f"‚ùå Este comando s√≥ pode ser usado no canal designado. Canal atual: {ctx.channel.id}")
            return False
        return True
    return commands.check(predicate)

# Dicion√°rio para armazenar sele√ß√µes em andamento
selecoes_ativas = {}
# Dicion√°rio para armazenar status de upload em andamento
uploads_ativos = {}
# Dicion√°rio para armazenar metadados em revis√£o
revisoes_ativas = {}

# ========== SISTEMA DE FILA DE UPLOADS ==========
fila_uploads = asyncio.Queue()
upload_em_andamento = False
fila_ativa = {}
mensagem_fila_global = None  # Mensagem global da fila
ultima_mensagem_status = None  # √öltima mensagem de status do upload

# ========== VIEW BASE COM BOT√ÉO HOME ==========
class ViewComHome(View):
    """View base que inclui bot√£o Home em todas as p√°ginas"""
    def __init__(self, timeout=300):
        super().__init__(timeout=timeout)
    
    @discord.ui.button(label="üè† Home", style=discord.ButtonStyle.primary, emoji="üè†", row=4)
    async def home_button(self, interaction: discord.Interaction, button: Button):
        """Bot√£o Home para voltar ao menu principal"""
        try:
            await interaction.response.defer()
            await mostrar_menu_principal(interaction=interaction)
        except Exception as e:
            print(f"Erro no bot√£o Home: {e}")
            try:
                await interaction.followup.send("‚ùå Erro ao voltar ao menu principal.", ephemeral=True)
            except:
                channel = interaction.channel
                await channel.send("‚ùå Erro ao voltar ao menu principal.")

class TarefaUpload:
    def __init__(self, ctx, video_info, titulo, descricao, thumbnail_path=None, agendar=None):
        self.ctx = ctx
        self.video_info = video_info
        self.titulo = titulo
        self.descricao = descricao
        self.thumbnail_path = thumbnail_path
        self.agendar = agendar
        self.id_tarefa = f"{ctx.author.id}_{datetime.now().timestamp()}"
        self.status = "na_fila"
        self.mensagem_status = None
        self.posicao = 0

class AgendamentoSelect(Select):
    def __init__(self, opcoes_agendamento):
        super().__init__(
            placeholder="üéØ Selecione uma data para agendamento...",
            min_values=1,
            max_values=1,
            options=opcoes_agendamento
        )
        self.opcoes_agendamento = opcoes_agendamento
    
    async def callback(self, interaction: discord.Interaction):
        # Encontrar a op√ß√£o selecionada
        opcao_selecionada = None
        for opcao in self.opcoes_agendamento:
            if opcao.value == self.values[0]:
                opcao_selecionada = opcao
                break
        
        if opcao_selecionada:
            # Extrair a data do value
            data_selecionada = opcao_selecionada.value
            await interaction.response.send_message(
                f"‚è∞ **Data selecionada:** {opcao_selecionada.label}\n`{data_selecionada}`", 
                ephemeral=True
            )
            
            # Armazenar a sele√ß√£o no contexto
            self.view.agendamento_selecionado = data_selecionada
            self.view.stop()

class AgendamentoView(ViewComHome):
    def __init__(self, opcoes_agendamento, timeout=300):
        super().__init__(timeout=timeout)
        self.agendamento_selecionado = None
        self.add_item(AgendamentoSelect(opcoes_agendamento))

class ValidacaoView(ViewComHome):
    def __init__(self, timeout=300):
        super().__init__(timeout=timeout)
        self.aprovado = False
        self.editar_titulo = False
        self.editar_descricao = False
    
    @discord.ui.button(label="‚úÖ Aprovar Tudo", style=discord.ButtonStyle.success, emoji="‚úÖ")
    async def aprovar_tudo(self, interaction: discord.Interaction, button: Button):
        self.aprovado = True
        await interaction.response.send_message("‚úÖ **Metadados aprovados!** Continuando com o upload...", ephemeral=True)
        self.stop()
    
    @discord.ui.button(label="‚úèÔ∏è Editar T√≠tulo", style=discord.ButtonStyle.primary, emoji="‚úèÔ∏è")
    async def editar_titulo_btn(self, interaction: discord.Interaction, button: Button):
        self.editar_titulo = True
        await interaction.response.send_message("üìù **Envie o novo t√≠tulo** no chat (voc√™ tem 5 minutos):", ephemeral=True)
        self.stop()
    
    @discord.ui.button(label="üìù Editar Descri√ß√£o", style=discord.ButtonStyle.primary, emoji="üìù")
    async def editar_descricao_btn(self, interaction: discord.Interaction, button: Button):
        self.editar_descricao = True
        await interaction.response.send_message("üìÑ **Envie a nova descri√ß√£o** no chat (voc√™ tem 5 minutos):", ephemeral=True)
        self.stop()
    
    @discord.ui.button(label="‚ùå Cancelar", style=discord.ButtonStyle.danger, emoji="‚ùå")
    async def cancelar(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message("‚ùå **Upload cancelado.**", ephemeral=True)
        self.stop()

# ========== SISTEMA DE FLUXO CONT√çNUO CORRIGIDO ==========

class FluxoContinuoView(ViewComHome):
    def __init__(self, timeout=300):
        super().__init__(timeout=timeout)
    
    @discord.ui.button(label="üé¨ Adicionar Novo V√≠deo", style=discord.ButtonStyle.success, emoji="üé¨")
    async def adicionar_novo(self, interaction: discord.Interaction, button: Button):
        """CORRE√á√ÉO: Resposta imediata e depois processamento"""
        try:
            # Responder imediatamente √† intera√ß√£o
            await interaction.response.send_message("üîÑ Iniciando processo para novo v√≠deo...", ephemeral=True)
            
            # Usar followup para evitar problemas de timeout
            await interaction.followup.send("üìã Listando v√≠deos dispon√≠veis...", ephemeral=False)
            
            # Chamar a fun√ß√£o de listar v√≠deos
            await listar_videos_reacao(interaction=interaction)
            
        except Exception as e:
            print(f"Erro no bot√£o Adicionar Novo V√≠deo: {e}")
            try:
                await interaction.followup.send("‚ùå Erro ao processar solicita√ß√£o. Tente novamente.", ephemeral=True)
            except:
                # Se tudo falhar, enviar mensagem normal
                channel = interaction.channel
                await channel.send("‚ùå Erro ao processar solicita√ß√£o. Tente novamente.")
    
    @discord.ui.button(label="üìä Ver Fila Completa", style=discord.ButtonStyle.primary, emoji="üìä")
    async def ver_fila(self, interaction: discord.Interaction, button: Button):
        """CORRE√á√ÉO: Resposta imediata e depois processamento"""
        try:
            await interaction.response.send_message("üìä Buscando status da fila...", ephemeral=True)
            await mostrar_fila_detalhada(interaction=interaction)
        except Exception as e:
            print(f"Erro no bot√£o Ver Fila: {e}")
            try:
                await interaction.followup.send("‚ùå Erro ao buscar fila.", ephemeral=True)
            except:
                channel = interaction.channel
                await channel.send("‚ùå Erro ao buscar fila.")
    
    @discord.ui.button(label="‚öôÔ∏è Status do Sistema", style=discord.ButtonStyle.secondary, emoji="‚öôÔ∏è")
    async def status_sistema(self, interaction: discord.Interaction, button: Button):
        """CORRE√á√ÉO: Resposta imediata e depois processamento"""
        try:
            await interaction.response.send_message("‚öôÔ∏è Buscando status do sistema...", ephemeral=True)
            await mostrar_status_sistema(interaction=interaction)
        except Exception as e:
            print(f"Erro no bot√£o Status Sistema: {e}")
            try:
                await interaction.followup.send("‚ùå Erro ao buscar status.", ephemeral=True)
            except:
                channel = interaction.channel
                await channel.send("‚ùå Erro ao buscar status.")
    
    @discord.ui.button(label="‚ùå Finalizar", style=discord.ButtonStyle.danger, emoji="‚ùå")
    async def finalizar(self, interaction: discord.Interaction, button: Button):
        """CORRE√á√ÉO: Resposta simples e direta"""
        try:
            await interaction.response.send_message("‚úÖ **Processo finalizado.** Voc√™ pode reiniciar a qualquer momento usando `!listar` ou o menu principal.", ephemeral=True)
        except Exception as e:
            print(f"Erro no bot√£o Finalizar: {e}")
            channel = interaction.channel
            await channel.send("‚úÖ **Processo finalizado.**")

# ========== SISTEMA DE MENU POR REA√á√ÉO CORRIGIDO ==========

class MenuView(ViewComHome):
    def __init__(self, timeout=300):
        super().__init__(timeout=timeout)
    
    @discord.ui.button(label="üìã Comandos", style=discord.ButtonStyle.primary, emoji="üìã")
    async def comandos(self, interaction: discord.Interaction, button: Button):
        """CORRE√á√ÉO: Resposta imediata e depois processamento"""
        try:
            await interaction.response.send_message("üìã Carregando comandos...", ephemeral=True)
            await mostrar_comandos(interaction=interaction)
        except Exception as e:
            print(f"Erro no bot√£o Comandos: {e}")
            try:
                await interaction.followup.send("‚ùå Erro ao carregar comandos.", ephemeral=True)
            except:
                channel = interaction.channel
                await channel.send("‚ùå Erro ao carregar comandos.")
    
    @discord.ui.button(label="üé¨ Listar V√≠deos", style=discord.ButtonStyle.success, emoji="üé¨")
    async def listar_videos(self, interaction: discord.Interaction, button: Button):
        """CORRE√á√ÉO: Resposta imediata e depois processamento"""
        try:
            await interaction.response.send_message("üîÑ Iniciando processo de listagem...", ephemeral=True)
            await listar_videos_reacao(interaction=interaction)
        except Exception as e:
            print(f"Erro no bot√£o Listar V√≠deos: {e}")
            try:
                await interaction.followup.send("‚ùå Erro ao listar v√≠deos.", ephemeral=True)
            except:
                channel = interaction.channel
                await channel.send("‚ùå Erro ao listar v√≠deos.")
    
    @discord.ui.button(label="üìä Status da Fila", style=discord.ButtonStyle.secondary, emoji="üìä")
    async def status_fila(self, interaction: discord.Interaction, button: Button):
        """CORRE√á√ÉO: Resposta imediata e depois processamento"""
        try:
            await interaction.response.send_message("üìä Buscando status da fila...", ephemeral=True)
            await mostrar_fila_detalhada(interaction=interaction)
        except Exception as e:
            print(f"Erro no bot√£o Status Fila: {e}")
            try:
                await interaction.followup.send("‚ùå Erro ao buscar fila.", ephemeral=True)
            except:
                channel = interaction.channel
                await channel.send("‚ùå Erro ao buscar fila.")
    
    @discord.ui.button(label="‚öôÔ∏è Status Sistema", style=discord.ButtonStyle.secondary, emoji="‚öôÔ∏è")
    async def status_sistema(self, interaction: discord.Interaction, button: Button):
        """CORRE√á√ÉO: Resposta imediata e depois processamento"""
        try:
            await interaction.response.send_message("‚öôÔ∏è Buscando status do sistema...", ephemeral=True)
            await mostrar_status_sistema(interaction=interaction)
        except Exception as e:
            print(f"Erro no bot√£o Status Sistema: {e}")
            try:
                await interaction.followup.send("‚ùå Erro ao buscar status.", ephemeral=True)
            except:
                channel = interaction.channel
                await channel.send("‚ùå Erro ao buscar status.")

# ========== FUN√á√ïES DO SISTEMA DE FILA ==========

async def gerenciador_fila_uploads():
    """Processa a fila de uploads sequencialmente"""
    global upload_em_andamento, ultima_mensagem_status
    
    while True:
        try:
            if not fila_uploads.empty() and not upload_em_andamento:
                upload_em_andamento = True
                tarefa = await fila_uploads.get()
                
                # Atualizar status
                tarefa.status = "em_upload"
                await atualizar_status_fila(tarefa)
                await atualizar_fila_global()
                
                # Executar upload
                try:
                    resultado = await upload_youtube_real(
                        tarefa.ctx,
                        tarefa.mensagem_status,
                        tarefa.video_info['video'],
                        tarefa.titulo,
                        tarefa.descricao,
                        tarefa.thumbnail_path,
                        tarefa.agendar if tarefa.agendar != "imediato" else None
                    )
                    
                    # Notificar conclus√£o
                    await notificar_conclusao_upload(tarefa, resultado)
                    
                    # OFERECER PR√ìXIMO PASSO AP√ìS CONCLUS√ÉO
                    if resultado['status'] == 'sucesso':
                        await asyncio.sleep(2)  # Pequena pausa para melhor UX
                        await oferecer_proximo_passo(tarefa.ctx, tarefa.titulo)
                    
                except Exception as e:
                    print(f"Erro durante o upload: {e}")
                    await tarefa.ctx.send(f"‚ùå Erro durante o upload: {str(e)}")
                
                finally:
                    # Limpar e processar pr√≥ximo
                    upload_em_andamento = False
                    fila_uploads.task_done()
                    
                    # Remover da fila ativa
                    if tarefa.id_tarefa in fila_ativa:
                        del fila_ativa[tarefa.id_tarefa]
                    
                    # Atualizar fila global
                    await atualizar_fila_global()
            
            await asyncio.sleep(5)  # Verificar a cada 5 segundos
            
        except Exception as e:
            print(f"Erro no gerenciador de fila: {e}")
            upload_em_andamento = False
            await asyncio.sleep(10)

async def adicionar_na_fila(ctx, video_info, titulo, descricao, thumbnail_path=None, agendar=None):
    """Adiciona um v√≠deo √† fila de uploads"""
    global ultima_mensagem_status
    
    tarefa = TarefaUpload(ctx, video_info, titulo, descricao, thumbnail_path, agendar)
    
    # Calcular posi√ß√£o na fila
    posicao = fila_uploads.qsize() + 1
    tarefa.posicao = posicao
    
    # Criar mensagem de status na fila
    embed_fila = discord.Embed(
        title="üìã V√≠deo Adicionado √† Fila de Upload",
        color=0xffff00
    )
    embed_fila.add_field(name="üé¨ T√≠tulo", value=f"```{titulo[:100]}...```" if len(titulo) > 100 else f"```{titulo}```", inline=False)
    embed_fila.add_field(name="üìä Status", value="‚è≥ **Na Fila** - Aguardando vez...", inline=False)
    embed_fila.add_field(name="üìä Posi√ß√£o na Fila", value=f"`{posicao}`", inline=True)
    
    if agendar and agendar != "imediato":
        embed_fila.add_field(name="‚è∞ Agendamento", value=f"`{agendar}`", inline=True)
    
    mensagem_fila = await ctx.send(embed=embed_fila)
    tarefa.mensagem_status = mensagem_fila
    
    # Atualizar √∫ltima mensagem de status
    ultima_mensagem_status = mensagem_fila
    
    # Adicionar √† fila e dicion√°rio ativo
    await fila_uploads.put(tarefa)
    fila_ativa[tarefa.id_tarefa] = tarefa
    
    # Iniciar gerenciador se n√£o estiver rodando
    if not hasattr(bot, 'gerenciador_fila_iniciado'):
        bot.gerenciador_fila_iniciado = True
        bot.loop.create_task(gerenciador_fila_uploads())
    
    # ATUALIZAR FILA GLOBAL SEMPRE QUE ADICIONAR NOVO V√çDEO
    await atualizar_fila_global()
    
    return tarefa

async def atualizar_status_fila(tarefa):
    """Atualiza o status de um item na fila"""
    global ultima_mensagem_status
    
    try:
        # Verificar se a mensagem ainda existe e √© acess√≠vel
        try:
            await tarefa.mensagem_status.channel.fetch_message(tarefa.mensagem_status.id)
        except discord.NotFound:
            print("Mensagem de status n√£o encontrada, criando nova...")
            # Recriar a mensagem de status
            embed = discord.Embed(
                title="üìã Status do V√≠deo na Fila",
                color=0xffff00
            )
            embed.add_field(name="üé¨ T√≠tulo", value=f"```{tarefa.titulo[:100]}...```" if len(tarefa.titulo) > 100 else f"```{tarefa.titulo}```", inline=False)
            
            if tarefa.status == "na_fila":
                status_text = f"‚è≥ **Na Fila** - Posi√ß√£o: `{tarefa.posicao}`"
            elif tarefa.status == "em_upload":
                status_text = "üì§ **Fazendo Upload** - Processando..."
            elif tarefa.status == "concluido":
                status_text = "‚úÖ **Conclu√≠do**"
            elif tarefa.status == "erro":
                status_text = "‚ùå **Erro no Upload**"
            
            embed.add_field(name="üìä Status", value=status_text, inline=False)
            embed.add_field(name="üìä Posi√ß√£o na Fila", value=f"`{tarefa.posicao}`", inline=True)
            
            if tarefa.agendar and tarefa.agendar != "imediato":
                embed.add_field(name="‚è∞ Agendamento", value=f"`{tarefa.agendar}`", inline=True)
            
            nova_mensagem = await tarefa.ctx.send(embed=embed)
            tarefa.mensagem_status = nova_mensagem
            return

        embed = tarefa.mensagem_status.embeds[0]
        
        # Atualizar campos
        embed.clear_fields()
        embed.add_field(name="üé¨ T√≠tulo", value=f"```{tarefa.titulo[:100]}...```" if len(tarefa.titulo) > 100 else f"```{tarefa.titulo}```", inline=False)
        
        if tarefa.status == "na_fila":
            status_text = f"‚è≥ **Na Fila** - Posi√ß√£o: `{tarefa.posicao}`"
        elif tarefa.status == "em_upload":
            status_text = "üì§ **Fazendo Upload** - Processando..."
        elif tarefa.status == "concluido":
            status_text = "‚úÖ **Conclu√≠do**"
        elif tarefa.status == "erro":
            status_text = "‚ùå **Erro no Upload**"
        
        embed.add_field(name="üìä Status", value=status_text, inline=False)
        embed.add_field(name="üìä Posi√ß√£o na Fila", value=f"`{tarefa.posicao}`", inline=True)
        
        if tarefa.agendar and tarefa.agendar != "imediato":
            embed.add_field(name="‚è∞ Agendamento", value=f"`{tarefa.agendar}`", inline=True)
        
        await tarefa.mensagem_status.edit(embed=embed)
        
        # Atualizar √∫ltima mensagem de status
        ultima_mensagem_status = tarefa.mensagem_status
        
    except Exception as e:
        print(f"Erro ao atualizar status da fila: {e}")

async def atualizar_fila_global():
    """Atualiza a mensagem global da fila"""
    global mensagem_fila_global
    
    try:
        # Buscar todas as tarefas ativas
        tarefas_ativas = list(fila_ativa.values())
        tarefas_ativas.sort(key=lambda x: x.posicao)
        
        embed = discord.Embed(
            title="üîÑ Fila de Uploads - Vis√£o Geral",
            color=0x0099ff,
            timestamp=datetime.now()
        )
        
        if not tarefas_ativas and not upload_em_andamento:
            embed.description = "üì≠ **Fila vazia** - Nenhum upload pendente"
        else:
            # Upload atual
            if upload_em_andamento:
                embed.add_field(
                    name="üé¨ Upload Atual", 
                    value="üì§ **Processando upload em andamento...**", 
                    inline=False
                )
            
            # Itens na fila
            if tarefas_ativas:
                embed.add_field(
                    name=f"‚è≥ Uploads Pendentes ({len(tarefas_ativas)})", 
                    value="\n".join([f"`{t.posicao}.` {t.titulo[:50]}... - {t.status}" for t in tarefas_ativas]),
                    inline=False
                )
            
            embed.add_field(
                name="üìä Estat√≠sticas",
                value=f"‚Ä¢ Uploads na fila: `{len(tarefas_ativas)}`\n‚Ä¢ Upload em andamento: `{'Sim' if upload_em_andamento else 'N√£o'}`\n‚Ä¢ Pr√≥xima posi√ß√£o: `{len(tarefas_ativas) + 1}`",
                inline=False
            )
        
        embed.set_footer(text="Fila atualizada automaticamente")
        
        # Atualizar ou criar mensagem global
        if mensagem_fila_global:
            try:
                await mensagem_fila_global.edit(embed=embed)
            except discord.NotFound:
                # Se a mensagem foi deletada, criar nova
                canal = bot.get_channel(CANAL_DISCORD_ID)
                if canal:
                    mensagem_fila_global = await canal.send(embed=embed)
            except Exception as e:
                print(f"Erro ao editar mensagem global da fila: {e}")
        else:
            canal = bot.get_channel(CANAL_DISCORD_ID)
            if canal:
                mensagem_fila_global = await canal.send(embed=embed)
                
    except Exception as e:
        print(f"Erro ao atualizar fila global: {e}")

# ========== FUN√á√ÉO PARA EXCLUIR ARQUIVOS DO V√çDEO ==========

async def excluir_arquivos_video(video_info, ctx):
    """Exclui todos os arquivos relacionados ao v√≠deo ap√≥s upload bem-sucedido"""
    try:
        arquivos_excluidos = []
        arquivos_erros = []
        
        # Lista de tipos de arquivos para excluir
        tipos_arquivos = ['video', 'contexto', 'thumb', 'legendas']
        
        for tipo in tipos_arquivos:
            if tipo in video_info and video_info[tipo]:
                caminho_arquivo = video_info[tipo]
                try:
                    if os.path.exists(caminho_arquivo):
                        os.remove(caminho_arquivo)
                        arquivos_excluidos.append(f"`{os.path.basename(caminho_arquivo)}`")
                        print(f"‚úÖ Arquivo exclu√≠do: {caminho_arquivo}")
                    else:
                        arquivos_erros.append(f"`{os.path.basename(caminho_arquivo)}` (n√£o encontrado)")
                except Exception as e:
                    arquivos_erros.append(f"`{os.path.basename(caminho_arquivo)}` (erro: {str(e)})")
                    print(f"‚ùå Erro ao excluir {caminho_arquivo}: {e}")
        
        # Verificar se h√° uma pasta com o nome base do v√≠deo e tentar exclu√≠-la se estiver vazia
        nome_base = video_info.get('nome_base', '')
        if nome_base:
            pasta_video = os.path.join(PASTA_VIDEOS, nome_base)
            if os.path.exists(pasta_video) and os.path.isdir(pasta_video):
                try:
                    # Verificar se a pasta est√° vazia
                    if not os.listdir(pasta_video):
                        os.rmdir(pasta_video)
                        arquivos_excluidos.append(f"`pasta {nome_base}/`")
                        print(f"‚úÖ Pasta vazia exclu√≠da: {pasta_video}")
                    else:
                        print(f"‚ÑπÔ∏è Pasta n√£o vazia, mantida: {pasta_video}")
                except Exception as e:
                    print(f"‚ùå Erro ao excluir pasta {pasta_video}: {e}")
        
        # Criar embed de relat√≥rio de exclus√£o
        embed_exclusao = discord.Embed(
            title="üóëÔ∏è Limpeza de Arquivos Conclu√≠da",
            color=0x00ff00,
            timestamp=datetime.now()
        )
        
        if arquivos_excluidos:
            embed_exclusao.add_field(
                name="‚úÖ Arquivos Exclu√≠dos",
                value="\n".join(arquivos_excluidos),
                inline=False
            )
        
        if arquivos_erros:
            embed_exclusao.add_field(
                name="‚ö†Ô∏è Arquivos com Problemas",
                value="\n".join(arquivos_erros),
                inline=False
            )
        
        if not arquivos_excluidos and not arquivos_erros:
            embed_exclusao.description = "‚ÑπÔ∏è Nenhum arquivo encontrado para exclus√£o."
        
        embed_exclusao.set_footer(text="Arquivos limpos automaticamente ap√≥s upload bem-sucedido")
        
        # CORRE√á√ÉO: Usar uma nova mensagem em vez de tentar editar mensagens antigas
        await ctx.send(embed=embed_exclusao)
        
        return len(arquivos_excluidos), len(arquivos_erros)
        
    except Exception as e:
        print(f"‚ùå Erro geral na exclus√£o de arquivos: {e}")
        # CORRE√á√ÉO: Usar uma nova mensagem em vez de tentar editar mensagens antigas
        await ctx.send(f"‚ùå **Erro na limpeza de arquivos:** {str(e)}")
        return 0, 1

async def notificar_conclusao_upload(tarefa, resultado):
    """Notifica a conclus√£o do upload e exclui os arquivos se bem-sucedido"""
    global ultima_mensagem_status
    
    if resultado['status'] == 'sucesso':
        embed_final = discord.Embed(
            title="üéâ Upload Conclu√≠do com Sucesso!",
            color=0x00ff00
        )
        embed_final.add_field(name="üé¨ T√≠tulo", value=tarefa.titulo, inline=False)
        embed_final.add_field(name="üîó URL do V√≠deo", value=resultado['url'], inline=False)
        
        if tarefa.agendar and tarefa.agendar != "imediato":
            embed_final.add_field(name="‚è∞ Agendado para", value=tarefa.agendar, inline=False)
        
        embed_final.add_field(name="üìä Status", value="‚úÖ V√≠deo publicado com sucesso!", inline=False)
        
        # CORRE√á√ÉO: Sempre criar nova mensagem em vez de editar mensagens antigas
        mensagem_conclusao = await tarefa.ctx.send(embed=embed_final)
        ultima_mensagem_status = mensagem_conclusao
        
        # EXCLUIR ARQUIVOS AP√ìS UPLOAD BEM-SUCEDIDO
        await asyncio.sleep(2)  # Pequena pausa antes da limpeza
        await tarefa.ctx.send("üóëÔ∏è **Iniciando limpeza autom√°tica de arquivos...**")
        
        arquivos_excluidos, arquivos_erros = await excluir_arquivos_video(tarefa.video_info, tarefa.ctx)
        
        if arquivos_excluidos > 0:
            await tarefa.ctx.send(f"‚úÖ **Limpeza conclu√≠da!** `{arquivos_excluidos}` arquivo(s) exclu√≠do(s).")
        else:
            await tarefa.ctx.send("‚ÑπÔ∏è **Nenhum arquivo foi exclu√≠do.** Verifique se os arquivos ainda existem.")
        
    else:
        embed_erro = discord.Embed(
            title="‚ùå Falha no Upload",
            color=0xff0000
        )
        embed_erro.add_field(name="üìÑ Detalhes do Erro", value=resultado['mensagem'], inline=False)
        # CORRE√á√ÉO: Sempre criar nova mensagem em vez de editar mensagens antigas
        mensagem_erro = await tarefa.ctx.send(embed=embed_erro)
        ultima_mensagem_status = mensagem_erro

async def oferecer_proximo_passo(ctx, ultimo_video_titulo=None):
    """Oferece o pr√≥ximo passo ap√≥s um upload ser adicionado √† fila ou conclu√≠do"""
    global ultima_mensagem_status
    
    embed = discord.Embed(
        title="üéØ Pr√≥ximo Passo - O que deseja fazer?",
        color=0x00ff00,
        timestamp=datetime.now()
    )
    
    if ultimo_video_titulo:
        embed.add_field(
            name="‚úÖ Upload Conclu√≠do",
            value=f"**`{ultimo_video_titulo}`**\n*foi processado com sucesso!*",
            inline=False
        )
    
    embed.add_field(
        name="üîÑ Op√ß√µes Dispon√≠veis",
        value=(
            "**üé¨ Adicionar Novo V√≠deo** - Iniciar processo para outro v√≠deo\n"
            "**üìä Ver Fila Completa** - Status atual de todos os uploads\n"
            "**‚öôÔ∏è Status do Sistema** - Ver configura√ß√µes e estat√≠sticas\n"
            "**‚ùå Finalizar** - Encerrar sess√£o atual"
        ),
        inline=False
    )
    
    embed.add_field(
        name="üìà Estat√≠sticas da Fila",
        value=f"‚Ä¢ Uploads na fila: `{fila_uploads.qsize()}`\n‚Ä¢ Upload em andamento: `{'Sim' if upload_em_andamento else 'N√£o'}`",
        inline=False
    )
    
    embed.add_field(
        name="üóëÔ∏è Limpeza Autom√°tica",
        value="‚úÖ **Arquivos exclu√≠dos** - Todos os arquivos do v√≠deo foram removidos automaticamente ap√≥s o upload",
        inline=False
    )
    
    embed.set_footer(text="Selecione uma op√ß√£o abaixo para continuar")
    
    view = FluxoContinuoView(timeout=TIMEOUT_INTERACOES)
    mensagem = await ctx.send(embed=embed, view=view)
    
    # Atualizar √∫ltima mensagem de status
    ultima_mensagem_status = mensagem
    
    return mensagem

# ========== FUN√á√ÉO PARA MOSTRAR MENU PRINCIPAL ==========

async def mostrar_menu_principal(interaction=None, ctx=None, channel=None):
    """Mostra o menu principal (Home) - VERS√ÉO CORRIGIDA"""
    global ultima_mensagem_status
    
    # Determinar o canal de destino
    if interaction:
        channel = interaction.channel
    elif ctx:
        channel = ctx.channel
    elif channel is None:
        print("‚ùå Erro: nenhum canal, intera√ß√£o ou contexto fornecido para mostrar_menu_principal")
        return
    
    embed = discord.Embed(
        title="ü§ñ Bot de Automa√ß√£o YouTube - Menu Principal",
        description="**Estou pronto para ajudar! Use os bot√µes abaixo para navegar:**",
        color=0x00ff00,
        timestamp=datetime.now()
    )
    
    embed.add_field(
        name="üìã Menu de Navega√ß√£o",
        value=(
            "**üìã Comandos** - Mostra lista de comandos\n"
            "**üé¨ Listar V√≠deos** - Lista v√≠deos para upload\n"
            "**üìä Status da Fila** - Mostra fila de uploads\n"
            "**‚öôÔ∏è Status Sistema** - Mostra status do sistema"
        ),
        inline=False
    )
    
    embed.add_field(
        name="üîÑ Sistema de Fila com Fluxo Cont√≠nuo",
        value="**Novo:** Ap√≥s cada upload, op√ß√µes autom√°ticas para pr√≥ximo v√≠deo\n**Otimizado:** Processo cont√≠nuo e intuitivo",
        inline=False
    )
    
    embed.add_field(
        name="üéØ Como Usar",
        value=(
            "1. **Listar V√≠deos** - Ver v√≠deos dispon√≠veis\n"
            "2. **Selecionar por rea√ß√£o** - Escolher v√≠deos\n"
            "3. **Validar metadados** - Revisar t√≠tulo/descri√ß√£o\n"
            "4. **Adicionar √† fila** - Upload autom√°tico\n"
            "5. **Fluxo cont√≠nuo** - Sempre oferece pr√≥ximo passo"
        ),
        inline=False
    )
    
    embed.add_field(
        name="üîß Funcionalidades Recentes",
        value=(
            "‚úÖ **Verifica√ß√£o de arquivos obrigat√≥rios**\n"
            "‚úÖ **Bot√£o Home em todas as p√°ginas**\n"
            "‚úÖ **Sistema de fila otimizado**\n"
            "‚úÖ **Uploads em background**\n"
            "‚úÖ **Limpeza autom√°tica de arquivos**"
        ),
        inline=False
    )
    
    embed.set_footer(text="Use os bot√µes abaixo para navegar ou os comandos ! tradicionais")
    
    view = MenuView(timeout=TIMEOUT_INTERACOES)
    
    if interaction:
        try:
            # Tentar editar a mensagem original se poss√≠vel
            if hasattr(interaction, 'response') and not interaction.response.is_done():
                await interaction.response.edit_message(embed=embed, view=view)
            else:
                await interaction.followup.send(embed=embed, view=view, ephemeral=False)
        except Exception as e:
            print(f"Erro ao mostrar menu principal via intera√ß√£o: {e}")
            await interaction.followup.send(embed=embed, view=view, ephemeral=False)
    else:
        mensagem = await channel.send(embed=embed, view=view)
        ultima_mensagem_status = mensagem

async def mostrar_fila_detalhada(interaction=None, ctx=None):
    """Mostra a fila detalhada (para rea√ß√£o ou comando)"""
    global ultima_mensagem_status
    
    channel = interaction.channel if interaction else ctx.channel
    
    if fila_uploads.empty() and not upload_em_andamento:
        embed = discord.Embed(
            title="üìä Fila de Uploads",
            description="üì≠ **Fila vazia** - Nenhum upload pendente",
            color=0x00ff00
        )
        view = ViewComHome(timeout=TIMEOUT_INTERACOES)
        if interaction:
            mensagem = await interaction.followup.send(embed=embed, view=view, ephemeral=False)
        else:
            mensagem = await ctx.send(embed=embed, view=view)
        ultima_mensagem_status = mensagem
        return
    
    embed = discord.Embed(
        title="üìä Status Detalhado da Fila de Uploads",
        color=0x0099ff
    )
    
    # Upload atual
    if upload_em_andamento:
        embed.add_field(
            name="üé¨ Upload Atual", 
            value="üì§ **Processando upload em andamento...**", 
            inline=False
        )
    
    # Itens na fila
    if fila_uploads.qsize() > 0:
        embed.add_field(
            name=f"‚è≥ Uploads Pendentes", 
            value=f"`{fila_uploads.qsize()}` v√≠deos na fila", 
            inline=False
        )
    
    embed.add_field(
        name="üìã A√ß√µes Dispon√≠veis",
        value=(
            "**üé¨ Adicionar Novo V√≠deo** - Iniciar processo para outro v√≠deo\n"
            "**üìä Status da Fila** - Ver status atualizado\n"
            "**‚öôÔ∏è Status Sistema** - Ver configura√ß√µes\n"
            "Uploads s√£o processados automaticamente üöÄ"
        ),
        inline=False
    )
    
    view = ViewComHome(timeout=TIMEOUT_INTERACOES)
    
    if interaction:
        mensagem = await interaction.followup.send(embed=embed, view=view, ephemeral=False)
    else:
        mensagem = await ctx.send(embed=embed, view=view)
    
    ultima_mensagem_status = mensagem

# ========== FUN√á√ïES DE MENU POR REA√á√ÉO CORRIGIDAS ==========

async def mostrar_comandos(interaction=None, ctx=None):
    """Mostra comandos dispon√≠veis (para rea√ß√£o ou comando)"""
    global ultima_mensagem_status
    
    channel = interaction.channel if interaction else ctx.channel
    
    embed = discord.Embed(
        title="üìã Menu de Comandos - Bot YouTube",
        description="**Selecione uma op√ß√£o abaixo ou use os bot√µes:**",
        color=0x0099ff
    )
    
    embed.add_field(
        name="üé¨ Comandos Principais",
        value=(
            "**üìã Comandos** - Mostra esta lista\n"
            "**üé¨ Listar V√≠deos** - Lista v√≠deos para upload\n"
            "**üìä Status da Fila** - Mostra fila de uploads\n"
            "**‚öôÔ∏è Status Sistema** - Mostra status do sistema"
        ),
        inline=False
    )
    
    embed.add_field(
        name="üîÑ Sistema de Fila",
        value=(
            "**Prepara√ß√£o simult√¢nea** - Enquanto um upload roda, prepare outros\n"
            "**Processamento autom√°tico** - Fila processa sequencialmente\n"
            "**Status em tempo real** - Veja posi√ß√£o e status de cada v√≠deo"
        ),
        inline=False
    )
    
    embed.add_field(
        name="üéØ Fluxo Cont√≠nuo",
        value=(
            "**Ap√≥s cada upload** - Op√ß√µes para pr√≥ximo v√≠deo\n"
            "**Navega√ß√£o intuitiva** - Sempre sabe o que fazer\n"
            "**Processo otimizado** - M√°ximo de efici√™ncia"
        ),
        inline=False
    )
    
    embed.add_field(
        name="‚öôÔ∏è Comandos de Texto",
        value=(
            "`!comandos` - Mostra esta lista\n"
            "`!listar` - Lista v√≠deos dispon√≠veis\n"
            "`!fila` - Mostra status da fila\n"
            "`!status` - Mostra status do sistema\n"
            "`!home` - Volta ao menu principal\n"
            "`!auth_youtube` - Reautentica com YouTube (dono)\n"
            "`!limpar_fila` - Limpa a fila (dono)"
        ),
        inline=False
    )
    
    embed.add_field(
        name="üóëÔ∏è Limpeza Autom√°tica",
        value="Ap√≥s cada upload bem-sucedido, todos os arquivos do v√≠deo (v√≠deo, contexto, thumbnail, legendas) s√£o **exclu√≠dos automaticamente** para liberar espa√ßo.",
        inline=False
    )
    
    view = ViewComHome(timeout=TIMEOUT_INTERACOES)
    
    if interaction:
        mensagem = await interaction.followup.send(embed=embed, view=view, ephemeral=False)
    else:
        mensagem = await ctx.send(embed=embed, view=view)
    
    ultima_mensagem_status = mensagem

async def listar_videos_reacao(interaction=None, ctx=None):
    """Lista v√≠deos por rea√ß√£o (para rea√ß√£o ou comando)"""
    global ultima_mensagem_status
    
    channel = interaction.channel if interaction else ctx.channel
    author = interaction.user if interaction else ctx.author
    
    arquivos = listar_arquivos_vinculados()
    
    if not arquivos:
        view = ViewComHome(timeout=TIMEOUT_INTERACOES)
        if interaction:
            mensagem = await interaction.followup.send("üì≠ Nenhum v√≠deo encontrado na pasta.", view=view, ephemeral=False)
        else:
            mensagem = await ctx.send("üì≠ Nenhum v√≠deo encontrado na pasta.", view=view)
        ultima_mensagem_status = mensagem
        return
    
    # Converter para lista para facilitar a indexa√ß√£o
    lista_arquivos = list(arquivos.items())
    
    embed = discord.Embed(
        title="üìπ Selecione um V√≠deo para Processar",
        description=f"Encontrados {len(arquivos)} v√≠deos. Reaja com o n√∫mero correspondente:",
        color=0x00ff00
    )
    
    # Emojis num√©ricos
    emojis_numeros = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
    
    for i, (nome, info) in enumerate(lista_arquivos[:10]):  # Limitar a 10 v√≠deos
        # Extrair informa√ß√µes do arquivo para mostrar no preview
        nome_jogo, numero_episodio = extrair_info_arquivo(info.get('video', ''))
        
        valor = f"**V√≠deo:** `{os.path.basename(info.get('video'))}`\n"
        valor += f"**Jogo Detectado:** {nome_jogo}\n"
        if numero_episodio:
            valor += f"**Epis√≥dio:** {numero_episodio}\n"
        
        # DESTACAR SE FALTAM ARQUIVOS OBRIGAT√ìRIOS
        if not info.get('contexto'):
            valor += "‚ö†Ô∏è **CONTEXTO: ‚ùå FALTANDO**\n"
        else:
            valor += "üìÑ Contexto: ‚úÖ\n"
            
        if not info.get('thumb'):
            valor += "‚ö†Ô∏è **THUMBNAIL: ‚ùå FALTANDO**\n"
        else:
            valor += "üñºÔ∏è Thumbnail: ‚úÖ\n"
            
        if info.get('legendas'):
            valor += "üéØ Legendas: ‚úÖ\n"
        
        embed.add_field(name=f"{emojis_numeros[i]} {nome}", value=valor, inline=False)
    
    if len(lista_arquivos) > 10:
        embed.add_field(
            name="‚ö†Ô∏è Limite Atingido", 
            value=f"Mostrando apenas os primeiros 10 de {len(lista_arquivos)} v√≠deos.", 
            inline=False
        )
    
    embed.add_field(
        name="üóëÔ∏è Aviso Importante",
        value="‚ö†Ô∏è **Ap√≥s o upload bem-sucedido, todos os arquivos deste v√≠deo ser√£o EXCLU√çDOS automaticamente!**",
        inline=False
    )
    
    embed.set_footer(text=f"Reaja com o n√∫mero correspondente ao v√≠deo (tempo limite: {TIMEOUT_INTERACOES//60} minutos)")
    
    if interaction:
        mensagem = await interaction.followup.send(embed=embed, wait=True)
    else:
        mensagem = await ctx.send(embed=embed)
    
    ultima_mensagem_status = mensagem
    
    # Adicionar rea√ß√µes
    for i in range(min(len(lista_arquivos), 10)):
        await mensagem.add_reaction(emojis_numeros[i])
    
    # Armazenar sele√ß√£o ativa
    selecoes_ativas[mensagem.id] = {
        'arquivos': lista_arquivos,
        'autor': author.id,
        'interaction': interaction
    }

async def mostrar_status_sistema(interaction=None, ctx=None):
    """Mostra status do sistema (para rea√ß√£o ou comando)"""
    global ultima_mensagem_status
    
    channel = interaction.channel if interaction else ctx.channel
    
    arquivos = listar_arquivos_vinculados()
    
    # Verificar configura√ß√µes
    tem_discord_token = bool(DISCORD_BOT_TOKEN)
    tem_deepseek_key = bool(DEEPSEEK_API_KEY)
    tem_credentials = os.path.exists('credentials.json')
    tem_token = os.path.exists('token.json')
    
    embed = discord.Embed(
        title="üìä Status do Sistema",
        color=0x0099ff
    )
    
    embed.add_field(name="üìÅ Pasta de V√≠deos", value=PASTA_VIDEOS, inline=False)
    embed.add_field(name="üé¨ V√≠deos Prontos", value=str(len(arquivos)), inline=True)
    embed.add_field(name="ü§ñ Bot Online", value="‚úÖ" if bot.is_ready() else "‚ùå", inline=True)
    
    # Status da fila
    status_fila = f"Upload em andamento: {'‚úÖ' if upload_em_andamento else '‚ùå'}\n"
    status_fila += f"V√≠deos na fila: `{fila_uploads.qsize()}`\n"
    status_fila += f"Fila ativa: {'‚úÖ' if hasattr(bot, 'gerenciador_fila_iniciado') else '‚ùå'}"
    
    embed.add_field(name="üîÑ Status da Fila", value=status_fila, inline=False)
    
    # Status das configura√ß√µes
    config_status = f"Discord Token: {'‚úÖ' if tem_discord_token else '‚ùå'}\n"
    config_status += f"DeepSeek API: {'‚úÖ' if tem_deepseek_key else '‚ùå'}\n"
    config_status += f"Credentials: {'‚úÖ' if tem_credentials else '‚ùå'}\n"
    config_status += f"Token YouTube: {'‚úÖ' if tem_token else '‚ùå'}"
    
    embed.add_field(name="‚öôÔ∏è Configura√ß√µes", value=config_status, inline=False)
    
    # Informa√ß√µes de tempo
    embed.add_field(
        name="‚è±Ô∏è Configura√ß√µes de Tempo", 
        value=f"Tempo limite entre intera√ß√µes: **{TIMEOUT_INTERACOES//60} minutos**", 
        inline=False
    )
    
    # Informa√ß√µes de arquivos obrigat√≥rios
    videos_sem_contexto = sum(1 for info in arquivos.values() if not info.get('contexto'))
    videos_sem_thumb = sum(1 for info in arquivos.values() if not info.get('thumb'))
    
    embed.add_field(
        name="üìã Status dos Arquivos",
        value=(
            f"V√≠deos sem contexto: `{videos_sem_contexto}`\n"
            f"V√≠deos sem thumbnail: `{videos_sem_thumb}`\n"
            f"Total de v√≠deos: `{len(arquivos)}`"
        ),
        inline=False
    )
    
    embed.add_field(
        name="üóëÔ∏è Limpeza Autom√°tica",
        value="‚úÖ **ATIVADA** - Arquivos s√£o exclu√≠dos automaticamente ap√≥s upload bem-sucedido",
        inline=False
    )
    
    view = ViewComHome(timeout=TIMEOUT_INTERACOES)
    
    if interaction:
        mensagem = await interaction.followup.send(embed=embed, view=view, ephemeral=False)
    else:
        mensagem = await ctx.send(embed=embed, view=view)
    
    ultima_mensagem_status = mensagem

# ========== FUN√á√ïES EXISTENTES (mantidas) ==========

def extrair_info_arquivo(nome_arquivo):
    """Extrai nome do jogo e n√∫mero do epis√≥dio do nome do arquivo"""
    # Remover extens√£o do arquivo
    nome_base = os.path.splitext(nome_arquivo)[0]
    
    # Padr√µes comuns para detectar epis√≥dios
    padroes_episodio = [
        r'[Ee]p[._\s]*(\d+)',  # Ep 1, Ep.1, Ep_1
        r'[Ee]pisodio[._\s]*(\d+)',  # Episodio 1
        r'[Pp]arte[._\s]*(\d+)',  # Parte 1
        r'[\._\-](\d+)[\._\-]',  # -01-, _01_
        r'\s(\d+)\s',  # espa√ßo 1 espa√ßo
    ]
    
    numero_episodio = None
    nome_jogo = nome_base
    
    # Tentar encontrar n√∫mero do epis√≥dio
    for padrao in padroes_episodio:
        match = re.search(padrao, nome_base)
        if match:
            numero_episodio = int(match.group(1))
            # Remover a parte do epis√≥dio do nome do jogo
            nome_jogo = re.sub(padrao, '', nome_base).strip()
            # Limpar caracteres especiais no final
            nome_jogo = re.sub(r'[\._\-]\s*$', '', nome_jogo).strip()
            break
    
    # Se n√£o encontrou padr√£o espec√≠fico, tentar encontrar n√∫meros no final
    if numero_episodio is None:
        match = re.search(r'(\d+)$', nome_base)
        if match:
            numero_episodio = int(match.group(1))
            nome_jogo = nome_base[:-len(match.group(1))].strip()
            nome_jogo = re.sub(r'[\._\-]\s*$', '', nome_jogo).strip()
    
    return nome_jogo, numero_episodio

def autenticar_youtube():
    """Autentica com a API do YouTube usando credentials.json"""
    creds = None
    
    # token.json armazena os tokens de acesso/refresh
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    
    # Se n√£o h√° credenciais v√°lidas, faz o fluxo OAuth
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            if not os.path.exists('credentials.json'):
                print("‚ùå credentials.json n√£o encontrado")
                return None
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        
        # Salva as credenciais para a pr√≥xima execu√ß√£o
        with open('token.json', 'w') as token:
            token.write(creds.to_json())
    
    return build('youtube', 'v3', credentials=creds)

def listar_arquivos_vinculados():
    """Lista v√≠deos e arquivos relacionados com o mesmo nome base"""
    arquivos = {}
    padroes = ["*.mp4", "*.avi", "*.mkv", "*.mov", "*.srt", "*.jpg", "*.jpeg", "*.png", "*.txt", "*.json"]
    
    for padrao in padroes:
        for caminho in glob.glob(os.path.join(PASTA_VIDEOS, "**", padrao), recursive=True):
            nome_base = os.path.splitext(os.path.basename(caminho))[0]
            extensao = os.path.splitext(caminho)[1].lower()
            
            if nome_base not in arquivos:
                arquivos[nome_base] = {"nome_base": nome_base}
            
            if extensao in ['.mp4', '.avi', '.mkv', '.mov']:
                arquivos[nome_base]['video'] = caminho
            elif extensao == '.srt':
                arquivos[nome_base]['legendas'] = caminho
            elif extensao in ['.jpg', '.jpeg', '.png']:
                arquivos[nome_base]['thumb'] = caminho
            elif extensao in ['.txt', '.json']:
                arquivos[nome_base]['contexto'] = caminho
                
    # Retorna apenas os que t√™m v√≠deo
    return {k: v for k, v in arquivos.items() if 'video' in v}

async def gerar_metadados_deepseek(contexto, nome_jogo, numero_episodio):
    """Gera t√≠tulo e descri√ß√£o otimizados para gameplay usando a API do DeepSeek"""
    if not DEEPSEEK_API_KEY:
        titulo_fallback = f"üéÆ {nome_jogo} - Epis√≥dio {numero_episodio if numero_episodio else 1}: Aventura Inicial"
        return titulo_fallback, f"""üéÆ {nome_jogo} - Epis√≥dio {numero_episodio if numero_episodio else 1}: Aventura Inicial

üìñ Sinopse
Embarque nesta jornada emocionante cheia de desafios e descobertas. A cada epis√≥dio, novas aventuras aguardam!

üéØ Neste Epis√≥dio:
‚Ä¢ üéÆ Gameplay intenso e envolvente
‚Ä¢ üó∫Ô∏è Explora√ß√£o de novos territ√≥rios
‚Ä¢ ‚öîÔ∏è Desafios estrat√©gicos e emocionantes
‚Ä¢ üéØ Objetivos e miss√µes desafiadoras
‚Ä¢ üí° Momentos √©picos e inesquec√≠veis

üí° Uma aventura que vai te prender do in√≠cio ao fim!

üîñ #Gameplay #Gaming #GameplayPTBR #Viral #Games #Jogos #GameplayBrazil"""

    url = "https://api.deepseek.com/v1/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}"
    }

    # Preparar informa√ß√µes do epis√≥dio para o prompt
    info_episodio = f"Nome do Jogo: {nome_jogo}\n"
    if numero_episodio:
        info_episodio += f"N√∫mero do Epis√≥dio: {numero_episodio}\n"
    info_episodio += f"Contexto Adicional: {contexto}"

    prompt = f"""
    COM BASE NAS INFORMA√á√ïES ABAIXO, GERAR METADADOS OTIMIZADOS PARA V√çDEO DE GAMEPLAY:

    INFORMA√á√ïES DO EPIS√ìDIO:
    {info_episodio}

    REGRAS ESTRITAS PARA FORMATA√á√ÉO:

    T√çTULO (OBRIGAT√ìRIO):
    - SEMPRE iniciar com: "üéÆ [NOME DO JOGO] - Epis√≥dio [X]:"
    - [X] = n√∫mero sequencial do epis√≥dio ({numero_episodio if numero_episodio else "use 1 se n√£o especificado"})
    - [NOME DO JOGO] = "{nome_jogo}"
    - T√≠tulo criativo: 3-5 palavras que capturem a ess√™ncia sem spoilers
    - Tom: misterioso e convidativo

    DESCRI√á√ÉO (ESTRUTURA EXATA):
    üéÆ [N√ÉO INCLUA O T√çTULO AQUI]
    
    üìñ SINOPSE
    [4-6 linhas descrevendo contexto e atmosfera]
    [Introduzir conflito sem spoilers]
    [Estabelecer progress√£o emocional]
    
    üéØ NESTE EPIS√ìDIO:
    ‚Ä¢ [Item 1 com emoji relevante]
    ‚Ä¢ [Item 2 com emoji relevante] 
    ‚Ä¢ [Item 3 com emoji relevante]
    ‚Ä¢ [Item 4 com emoji relevante]
    ‚Ä¢ [Item 5 com emoji relevante]
    
    üí° [Frase de impacto em 1 linha - gancho emocional]
    
    üîñ HASHTAGS
    [6-8 hashtags priorit√°rias incluindo #Gameplay e varia√ß√µes]

    L√ìGICA DE CONTE√öDO:
    - Usar o nome do jogo fornecido: "{nome_jogo}"
    - Usar n√∫mero do epis√≥dio: {numero_episodio if numero_episodio else "1 (padr√£o)"}
    - Mapear elementos-chave: personagens, locais, mec√¢nicas, progress√£o emocional
    - Evitar completamente spoilers
    - Usar tom envolvente e misterioso
    - Incluir 5-8 palavras-chave semanticamente relacionadas

    FORMATO DE RESPOSTA (SEGUIR EXATAMENTE):
    TITULO: üéÆ {nome_jogo} - Epis√≥dio {numero_episodio if numero_episodio else 1}: [T√≠tulo Criativo 3-5 palavras]
    DESCRICAO: 
    üéÆ [T√≠tulo Completo]
    
    üìñ Sinopse
    [4-6 linhas aqui]
    
    üéØ Neste Epis√≥dio:
    ‚Ä¢ [Item 1]
    ‚Ä¢ [Item 2]
    ‚Ä¢ [Item 3]
    ‚Ä¢ [Item 4]
    ‚Ä¢ [Item 5]
    
    üí° [Frase de impacto]
    
    üîñ [Hashtags aqui]
    """

    data = {
        "model": "deepseek-chat",
        "messages": [
            {
                "role": "user",
                "content": prompt
            }
        ],
        "max_tokens": 2000,
        "temperature": 0.7
    }

    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
        if response.status_code == 200:
            resultado = response.json()
            resposta = resultado['choices'][0]['message']['content']
            
            # Processar resposta
            linhas = resposta.split('\n')
            titulo = None
            descricao = ""
            em_descricao = False
            
            for linha in linhas:
                if linha.startswith('TITULO: '):
                    titulo = linha.replace('TITULO: ', '').strip()
                elif linha.startswith('DESCRICAO: '):
                    descricao = linha.replace('DESCRICAO: ', '').strip()
                    em_descricao = True
                elif em_descricao:
                    if descricao:  # Se j√° come√ßamos a descri√ß√£o
                        descricao += "\n" + linha
                    else:
                        descricao = linha
            
            # Fallback se n√£o conseguir parsear corretamente
            if not titulo or not descricao:
                titulo_fallback = f"üéÆ {nome_jogo} - Epis√≥dio {numero_episodio if numero_episodio else 1}: Aventura Inicial"
                descricao_fallback = f"""üéÆ {nome_jogo} - Epis√≥dio {numero_episodio if numero_episodio else 1}: Aventura Inicial

üìñ Sinopse
Embarque nesta jornada √©pica de {nome_jogo}! Explore mundos incr√≠veis, enfrente desafios emocionantes e descubra segredos ocultos.

üéØ Neste Epis√≥dio:
‚Ä¢ üéÆ Gameplay envolvente e din√¢mico
‚Ä¢ üó∫Ô∏è Explora√ß√£o de ambientes impressionantes
‚Ä¢ ‚öîÔ∏è Desafios estrat√©gicos e intensos
‚Ä¢ üéØ Objetivos emocionantes e recompensadores
‚Ä¢ üí° Revela√ß√µes surpreendentes

üí° Uma aventura que vai te prender da primeira √† √∫ltima cena!

üîñ #{nome_jogo.replace(' ', '')} #Gameplay #Gaming #GameplayPTBR #Viral #Games"""
                
                return titulo_fallback, descricao_fallback

            return titulo, descricao
            
        else:
            print(f"Erro API DeepSeek: {response.status_code} - {response.text}")
            titulo_fallback = f"üéÆ {nome_jogo} - Epis√≥dio {numero_episodio if numero_episodio else 1}: Aventura Inicial"
            descricao_fallback = f"""üéÆ {nome_jogo} - Epis√≥dio {numero_episodio if numero_episodio else 1}: Aventura Inicial

üìñ Sinopse
Uma nova jornada em {nome_jogo} est√° prestes a come√ßar! Acompanhe esta aventura √∫nica cheia de emo√ß√µes.

üéØ Neste Epis√≥dio:
‚Ä¢ üéÆ Gameplay de alta qualidade
‚Ä¢ üó∫Ô∏è Descobertas impressionantes
‚Ä¢ ‚öîÔ∏è Desafios emocionantes
‚Ä¢ üéØ Objetivos importantes
‚Ä¢ üí° Momentos memor√°veis

üí° N√£o perca esta aventura √©pica!

üîñ #{nome_jogo.replace(' ', '')} #Gameplay #Gaming #Viral #GameplayBrazil"""
            
            return titulo_fallback, descricao_fallback
            
    except Exception as e:
        print(f"Erro ao chamar DeepSeek: {e}")
        titulo_fallback = f"üéÆ {nome_jogo} - Epis√≥dio {numero_episodio if numero_episodio else 1}: Aventura Inicial"
        descricao_fallback = f"""üéÆ {nome_jogo} - Epis√≥dio {numero_episodio if numero_episodio else 1}: Aventura Inicial

üìñ Sinopse
Embarque nesta incr√≠vel aventura em {nome_jogo}! Cada epis√≥dio traz novas surpresas e desafios.

üéØ Neste Epis√≥dio:
‚Ä¢ üéÆ Experi√™ncia de jogo imersiva
‚Ä¢ üó∫Ô∏è Ambientes ricos e detalhados
‚Ä¢ ‚öîÔ∏è Combates e estrat√©gias √∫nicas
‚Ä¢ üéØ Progress√£o emocionante
‚Ä¢ üí° Hist√≥rias cativantes

üí° Prepare-se para horas de divers√£o!

üîñ #{nome_jogo.replace(' ', '')} #Gameplay #Gaming #Viral #Games"""
        
        return titulo_fallback, descricao_fallback

async def atualizar_status_upload(ctx, message_id, etapa, progresso=0, total=100, detalhes=""):
    """Atualiza o status do upload em tempo real"""
    global ultima_mensagem_status
    
    try:
        # Calcular porcentagem
        porcentagem = (progresso / total) * 100 if total > 0 else 0
        
        # Criar barra de progresso
        barra_length = 20
        blocos_preenchidos = int(barra_length * porcentagem / 100)
        barra = "‚ñà" * blocos_preenchidos + "‚ñë" * (barra_length - blocos_preenchidos)
        
        # Definir cor baseado no progresso
        cor = 0x00ff00 if porcentagem == 100 else 0x0099ff if porcentagem >= 50 else 0xff9900 if porcentagem >= 25 else 0xff0000
        
        embed = discord.Embed(
            title="üì§ Status do Upload - YouTube",
            description=f"**Etapa:** {etapa}\n{detalhes}",
            color=cor,
            timestamp=datetime.now()
        )
        
        embed.add_field(
            name="üìä Progresso",
            value=f"```[{barra}] {porcentagem:.1f}%```\n{progresso}/{total}",
            inline=False
        )
        
        # Atualizar a mensagem
        try:
            mensagem = await ctx.channel.fetch_message(message_id)
            await mensagem.edit(embed=embed)
            ultima_mensagem_status = mensagem
        except discord.NotFound:
            print("Mensagem de status n√£o encontrada, criando nova...")
            nova_mensagem = await ctx.send(embed=embed)
            ultima_mensagem_status = nova_mensagem
        
    except Exception as e:
        print(f"Erro ao atualizar status: {e}")

async def upload_youtube_real(ctx, status_message, video_path, titulo, descricao, thumbnail_path=None, agendar=None):
    """Faz upload real para o YouTube usando a API com status em tempo real"""
    global ultima_mensagem_status
    
    try:
        # Etapa 1: Autentica√ß√£o
        await atualizar_status_upload(ctx, status_message.id, "üîê Autenticando com YouTube", 10, 100, "Conectando √† API do YouTube...")
        
        youtube = autenticar_youtube()
        if not youtube:
            await atualizar_status_upload(ctx, status_message.id, "‚ùå Falha na autentica√ß√£o", 0, 100, "N√£o foi poss√≠vel autenticar com o YouTube")
            return {"status": "erro", "mensagem": "Falha na autentica√ß√£o do YouTube"}
        
        # Etapa 2: Preparando upload
        await atualizar_status_upload(ctx, status_message.id, "üì¶ Preparando upload", 25, 100, "Configurando metadados do v√≠deo...")
        
        # Configura√ß√µes do v√≠deo
        body = {
            'snippet': {
                'title': titulo,
                'description': descricao,
                'tags': [],  # Voc√™ pode adicionar tags aqui
                'categoryId': '22'  # Categoria "People & Blogs"
            },
            'status': {
                'privacyStatus': 'private',  # Inicialmente privado
                'selfDeclaredMadeForKids': False
            }
        }
        
        # Se h√° agendamento, configura a data de publica√ß√£o
        if agendar:
            body['status']['publishAt'] = agendar
            body['status']['privacyStatus'] = 'private'  # Ser√° p√∫blico no agendamento
        else:
            body['status']['privacyStatus'] = 'public'
        
        # Etapa 3: Iniciando upload
        await atualizar_status_upload(ctx, status_message.id, "‚è´ Iniciando upload do v√≠deo", 40, 100, "Enviando arquivo de v√≠deo...")
        
        # Faz o upload do v√≠deo com monitoramento de progresso
        file_size = os.path.getsize(video_path)
        media = MediaFileUpload(video_path, chunksize=1024*1024, resumable=True)  # 1MB chunks
        
        request = youtube.videos().insert(
            part=','.join(body.keys()),
            body=body,
            media_body=media
        )
        
        # Etapa 4: Upload em progresso - MELHORIA: Monitoramento real do progresso
        response = None
        last_update = datetime.now()
        chunk_count = 0
        
        while response is None:
            status, response = request.next_chunk()
            chunk_count += 1
            
            if status:
                # Progresso baseado no n√∫mero de chunks processados (estimativa)
                progresso_estimado = min(40 + (chunk_count * 2), 90)  # Progresso de 40% a 90%
                
                # Atualizar a cada 5 chunks ou a cada 10 segundos
                if chunk_count % 5 == 0 or (datetime.now() - last_update).seconds >= 10:
                    await atualizar_status_upload(
                        ctx, status_message.id, 
                        "üì§ Upload em andamento", 
                        progresso_estimado, 100, 
                        f"Processando... ({chunk_count} chunks enviados)"
                    )
                    last_update = datetime.now()
            else:
                # Se n√£o h√° status, ainda estamos no in√≠cio do upload
                if chunk_count % 10 == 0:
                    progresso_estimado = min(40 + (chunk_count * 1), 85)
                    await atualizar_status_upload(
                        ctx, status_message.id,
                        "üì§ Preparando upload",
                        progresso_estimado, 100,
                        "Inicializando transmiss√£o de dados..."
                    )
        
        video_id = response['id']
        print(f"V√≠deo enviado com ID: {video_id}")
        
        # Etapa 5: Processamento no YouTube
        await atualizar_status_upload(ctx, status_message.id, "üîß Processamento no YouTube", 92, 100, "YouTube est√° processando o v√≠deo...")
        
        # Simular progresso do processamento
        for i in range(3):
            await asyncio.sleep(1)
            await atualizar_status_upload(
                ctx, status_message.id,
                "üîß Processamento no YouTube",
                92 + (i * 2), 100,
                f"Processando v√≠deo... ({i+1}/3)"
            )
        
        # Upload da thumbnail se existir - COM TRATAMENTO DE ERRO MELHORADO
        if thumbnail_path and os.path.exists(thumbnail_path):
            try:
                await atualizar_status_upload(ctx, status_message.id, "üñºÔ∏è Enviando thumbnail", 98, 100, "Enviando imagem de thumbnail...")
                
                # Aguardar um pouco para garantir que o v√≠deo esteja processado
                await asyncio.sleep(5)
                
                youtube.thumbnails().set(
                    videoId=video_id,
                    media_body=MediaFileUpload(thumbnail_path)
                ).execute()
                print("Thumbnail definida com sucesso.")
            except HttpError as e:
                if e.resp.status == 404:
                    print(f"Erro 404 ao definir thumbnail: V√≠deo ainda n√£o est√° dispon√≠vel. Tentando novamente em 10 segundos...")
                    await asyncio.sleep(10)
                    try:
                        youtube.thumbnails().set(
                            videoId=video_id,
                            media_body=MediaFileUpload(thumbnail_path)
                        ).execute()
                        print("Thumbnail definida com sucesso na segunda tentativa.")
                    except HttpError as e2:
                        print(f"Erro ao definir thumbnail na segunda tentativa: {e2}")
                else:
                    print(f"Erro ao definir thumbnail: {e}")
            except Exception as e:
                print(f"Erro ao definir thumbnail: {e}")
        
        # Etapa 6: Conclu√≠do
        await atualizar_status_upload(ctx, status_message.id, "‚úÖ Upload conclu√≠do!", 100, 100, "V√≠deo publicado com sucesso!")
        
        return {
            "status": "sucesso",
            "video_id": video_id,
            "url": f"https://youtube.com/watch?v={video_id}"
        }
        
    except Exception as e:
        print(f"Erro no upload do YouTube: {e}")
        await atualizar_status_upload(ctx, status_message.id, "‚ùå Erro no upload", 0, 100, f"Erro: {str(e)}")
        return {"status": "erro", "mensagem": str(e)}

def gerar_opcoes_agendamento():
    """Gera op√ß√µes de agendamento para os pr√≥ximos 24 dias (limite do Discord: 25 op√ß√µes)"""
    opcoes = []
    hoje = datetime.now()
    
    # Op√ß√£o de publica√ß√£o imediata
    opcoes.append(discord.SelectOption(
        label="üöÄ Publica√ß√£o Imediata",
        description="Publicar o v√≠deo assim que o upload terminar",
        value="imediato",
        emoji="üöÄ"
    ))
    
    # Op√ß√£o para hoje ao meio-dia (se ainda n√£o passou)
    hoje_meio_dia = hoje.replace(hour=12, minute=0, second=0, microsecond=0)
    if hoje_meio_dia > hoje:
        opcoes.append(discord.SelectOption(
            label=f"‚è∞ Hoje √†s 12:00",
            description=hoje_meio_dia.strftime("%d/%m/%Y %H:%M"),
            value=hoje_meio_dia.strftime("%Y-%m-%dT%H:%M:%S"),
            emoji="‚è∞"
        ))
    
    # Gerar op√ß√µes para os pr√≥ximos 23 dias (totalizando 25 op√ß√µes com a publica√ß√£o imediata e hoje)
    dias_restantes = 23
    
    for i in range(1, dias_restantes + 1):
        data = hoje + timedelta(days=i)
        data_meio_dia = data.replace(hour=12, minute=0, second=0, microsecond=0)
        
        # Formatar a label de forma amig√°vel
        if i == 1:
            label = "üìÖ Amanh√£ √†s 12:00"
        elif i <= 7:
            # Dias da semana para a primeira semana
            dias_semana = ["Segunda", "Ter√ßa", "Quarta", "Quinta", "Sexta", "S√°bado", "Domingo"]
            label = f"üìÖ {dias_semana[data.weekday()]} √†s 12:00"
        elif i <= 14:
            # Segunda semana com indica√ß√£o
            label = f"üóìÔ∏è Pr√≥xima {data.strftime('%A')} - {data_meio_dia.strftime('%d/%m')}"
        else:
            # Datas mais distantes
            semanas = (i + 6) // 7  # Calcula o n√∫mero de semanas
            label = f"üóìÔ∏è Em {semanas} semana(s) - {data_meio_dia.strftime('%d/%m')}"
        
        opcoes.append(discord.SelectOption(
            label=label,
            description=data_meio_dia.strftime("%d/%m/%Y √†s %H:%M"),
            value=data_meio_dia.strftime("%Y-%m-%dT%H:%M:%S"),
            emoji="üìÖ" if i <= 7 else "üóìÔ∏è"
        ))
        
        # Parar quando atingir 25 op√ß√µes (j√° inclu√≠mos a publica√ß√£o imediata)
        if len(opcoes) >= 25:
            break
    
    return opcoes

# ========== NOVAS FUN√á√ïES PARA VERIFICA√á√ÉO DE ARQUIVOS OBRIGAT√ìRIOS ==========

async def verificar_arquivos_obrigatorios(ctx, video_info):
    """Verifica se os arquivos obrigat√≥rios (contexto e thumbnail) existem"""
    nome_base = video_info['nome_base']
    
    # Verificar arquivo de contexto
    if not video_info.get('contexto'):
        await ctx.send(f"‚ö†Ô∏è **ARQUIVO DE CONTEXTO OBRIGAT√ìRIO**\n"
                      f"O v√≠deo `{nome_base}` n√£o possui arquivo de contexto (.txt).\n\n"
                      f"**Por favor, envie o arquivo de contexto** contendo informa√ß√µes sobre o epis√≥dio:")
        
        def check_arquivo_contexto(m):
            return (m.author == ctx.author and 
                   m.channel == ctx.channel and 
                   m.attachments and 
                   any(att.filename.lower().endswith('.txt') for att in m.attachments))
        
        try:
            msg_contexto = await bot.wait_for('message', timeout=TIMEOUT_INTERACOES, check=check_arquivo_contexto)
            arquivo_contexto = msg_contexto.attachments[0]
            
            # Salvar o arquivo de contexto
            caminho_contexto = os.path.join(PASTA_VIDEOS, f"{nome_base}.txt")
            await arquivo_contexto.save(caminho_contexto)
            video_info['contexto'] = caminho_contexto
            
            await ctx.send(f"‚úÖ **Arquivo de contexto salvo:** `{caminho_contexto}`")
            
        except asyncio.TimeoutError:
            await ctx.send("‚è∞ Tempo esgotado para envio do arquivo de contexto. Processo cancelado.")
            return False
    
    # Verificar arquivo de thumbnail
    if not video_info.get('thumb'):
        await ctx.send(f"‚ö†Ô∏è **ARQUIVO OF THUMBNAIL OBRIGAT√ìRIO**\n"
                      f"O v√≠deo `{nome_base}` n√£o possui arquivo de thumbnail (.jpg, .png, .jpeg).\n\n"
                      f"**Por favor, envie a imagem de thumbnail:**")
        
        def check_arquivo_thumbnail(m):
            return (m.author == ctx.author and 
                   m.channel == ctx.channel and 
                   m.attachments and 
                   any(att.filename.lower().endswith(('.jpg', '.jpeg', '.png')) for att in m.attachments))
        
        try:
            msg_thumbnail = await bot.wait_for('message', timeout=TIMEOUT_INTERACOES, check=check_arquivo_thumbnail)
            arquivo_thumbnail = msg_thumbnail.attachments[0]
            
            # Salvar o arquivo de thumbnail
            extensao = os.path.splitext(arquivo_thumbnail.filename)[1].lower()
            caminho_thumbnail = os.path.join(PASTA_VIDEOS, f"{nome_base}{extensao}")
            await arquivo_thumbnail.save(caminho_thumbnail)
            video_info['thumb'] = caminho_thumbnail
            
            await ctx.send(f"‚úÖ **Arquivo de thumbnail salvo:** `{caminho_thumbnail}`")
            
        except asyncio.TimeoutError:
            await ctx.send("‚è∞ Tempo esgotado para envio do arquivo de thumbnail. Processo cancelado.")
            return False
    
    return True

async def mostrar_status_arquivos(ctx, video_info):
    """Mostra o status dos arquivos obrigat√≥rios e opcionais"""
    nome_base = video_info['nome_base']
    
    embed = discord.Embed(
        title="üìã Status dos Arquivos do V√≠deo",
        description=f"Verifica√ß√£o dos arquivos para: `{nome_base}`",
        color=0x0099ff
    )
    
    # Status do arquivo de contexto
    if video_info.get('contexto'):
        embed.add_field(
            name="üìÑ Arquivo de Contexto", 
            value="‚úÖ **PRESENTE** - Informa√ß√µes dispon√≠veis para gera√ß√£o de metadados",
            inline=False
        )
    else:
        embed.add_field(
            name="üìÑ Arquivo de Contexto", 
            value="‚ùå **FALTANDO** - Arquivo .txt com informa√ß√µes do epis√≥dio",
            inline=False
        )
    
    # Status do arquivo de thumbnail
    if video_info.get('thumb'):
        embed.add_field(
            name="üñºÔ∏è Arquivo de Thumbnail", 
            value="‚úÖ **PRESENTE** - Imagem dispon√≠vel para o v√≠deo",
            inline=False
        )
    else:
        embed.add_field(
            name="üñºÔ∏è Arquivo de Thumbnail", 
            value="‚ùå **FALTANDO** - Arquivo de imagem (.jpg, .png, .jpeg)",
            inline=False
        )
    
    # Status de arquivos opcionais
    if video_info.get('legendas'):
        embed.add_field(
            name="üéØ Legendas", 
            value="‚úÖ **PRESENTE** - Arquivo de legendas dispon√≠vel",
            inline=True
        )
    else:
        embed.add_field(
            name="üéØ Legendas", 
            value="‚ö™ **OPCIONAL** - Arquivo de legendas n√£o encontrado",
            inline=True
        )
    
    embed.add_field(
        name="üóëÔ∏è Aviso de Limpeza",
        value="‚ö†Ô∏è **Todos estes arquivos ser√£o EXCLU√çDOS automaticamente ap√≥s o upload bem-sucedido!**",
        inline=False
    )
    
    view = ViewComHome(timeout=TIMEOUT_INTERACOES)
    await ctx.send(embed=embed, view=view)

# ========== EVENTOS DO BOT ==========

@bot.event
async def on_ready():
    global ultima_mensagem_status
    
    print(f'ü§ñ Bot conectado como {bot.user}')
    
    # Iniciar gerenciador de fila
    if not hasattr(bot, 'gerenciador_fila_iniciado'):
        bot.gerenciador_fila_iniciado = True
        bot.loop.create_task(gerenciador_fila_uploads())
        print('üîÑ Gerenciador de fila de uploads iniciado')
    
    # Verificar se o bot tem acesso ao canal espec√≠fico
    canal = bot.get_channel(CANAL_DISCORD_ID)
    if canal:
        print(f'üì¢ Bot est√° pronto para receber comandos no canal: {canal.name}')
        
        # CORRE√á√ÉO: Chamar a fun√ß√£o corretamente passando o canal
        await mostrar_menu_principal(channel=canal)
        
        # Criar mensagem global da fila
        await atualizar_fila_global()
    else:
        print(f'‚ùå N√£o foi poss√≠vel acessar o canal com ID: {CANAL_DISCORD_ID}')

@bot.event
async def on_reaction_add(reaction, user):
    """Processa rea√ß√µes em mensagens do bot"""
    global ultima_mensagem_status
    
    if user.bot:
        return
    
    # Verificar se √© uma rea√ß√£o em uma mensagem de sele√ß√£o de v√≠deos
    if reaction.message.id in selecoes_ativas:
        selecao = selecoes_ativas[reaction.message.id]
        
        if user.id != selecao['autor']:
            return
        
        # Emojis num√©ricos
        emojis_numeros = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
        
        if str(reaction.emoji) in emojis_numeros:
            indice = emojis_numeros.index(str(reaction.emoji))
            lista_arquivos = selecao['arquivos']
            
            if indice < len(lista_arquivos):
                nome_selecionado, video_info = lista_arquivos[indice]
                
                # Limpar sele√ß√£o
                del selecoes_ativas[reaction.message.id]
                
                # Processar v√≠deo selecionado
                ctx = selecao.get('interaction')
                if ctx:
                    # Se veio de uma intera√ß√£o por bot√£o
                    class ContextSimulado:
                        def __init__(self, interaction):
                            self.channel = interaction.channel
                            self.author = interaction.user
                            self.send = interaction.followup.send
                    ctx_simulado = ContextSimulado(ctx)
                    await processar_video_selecionado(ctx_simulado, nome_selecionado, video_info)
                else:
                    # Se veio de um comando tradicional
                    await processar_video_selecionado(reaction.message.channel, nome_selecionado, video_info)

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("‚ùå Comando n√£o encontrado. Use `!comandos` para ver todos os comandos dispon√≠veis.")
    elif isinstance(error, commands.CheckFailure):
        # N√£o faz nada para erros de canal incorreto, j√° que a mensagem j√° foi enviada
        pass
    else:
        await ctx.send(f"‚ùå Erro: {str(error)}")

# ========== COMANDOS TRADICIONAIS (mantidos para compatibilidade) ==========

@bot.command()
@verificar_canal_correto()
async def comandos(ctx):
    """Mostra todos os comandos dispon√≠veis"""
    await mostrar_comandos(ctx=ctx)

@bot.command()
@verificar_canal_correto()
async def listar(ctx):
    """Lista v√≠deos para sele√ß√£o por rea√ß√£o"""
    await listar_videos_reacao(ctx=ctx)

@bot.command()
@verificar_canal_correto()
async def fila(ctx):
    """Mostra o status atual da fila de uploads"""
    await mostrar_fila_detalhada(ctx=ctx)

@bot.command()
@verificar_canal_correto()
async def status(ctx):
    """Mostra status do sistema"""
    await mostrar_status_sistema(ctx=ctx)

@bot.command()
@verificar_canal_correto()
async def home(ctx):
    """Volta ao menu principal"""
    await mostrar_menu_principal(ctx=ctx)

@bot.command()
@verificar_canal_correto()
@commands.is_owner()
async def auth_youtube(ctx):
    """For√ßa reautentica√ß√£o com YouTube (apenas dono)"""
    try:
        await ctx.send("üîÑ Iniciando autentica√ß√£o com YouTube...")
        youtube = autenticar_youtube()
        if youtube:
            await ctx.send("‚úÖ Autentica√ß√£o com YouTube realizada com sucesso!")
        else:
            await ctx.send("‚ùå Falha na autentica√ß√£o do YouTube")
    except Exception as e:
        await ctx.send(f"‚ùå Erro na autentica√ß√£o: {e}")

@bot.command()
@verificar_canal_correto()
@commands.is_owner()
async def limpar_fila(ctx):
    """Limpa a fila de uploads (apenas dono)"""
    global fila_uploads, fila_ativa
    
    if fila_uploads.empty() and not upload_em_andamento:
        await ctx.send("üì≠ A fila j√° est√° vazia.")
        return
    
    # Criar nova fila vazia
    while not fila_uploads.empty():
        try:
            fila_uploads.get_nowait()
            fila_uploads.task_done()
        except:
            break
    
    fila_ativa.clear()
    
    await ctx.send("üóëÔ∏è **Fila limpa!** Todos os uploads pendentes foram removidos.")
    await atualizar_fila_global()

# ========== PROCESSAMENTO DE V√çDEOS (fun√ß√µes atualizadas) ==========

async def processar_edicao_metadados(ctx, video_info, titulo_original, descricao_original):
    """Processa a edi√ß√£o dos metadados pelo usu√°rio"""
    view = ValidacaoView(timeout=TIMEOUT_INTERACOES)
    embed_validacao = discord.Embed(
        title="‚úèÔ∏è Valida√ß√£o de Metadados - REVIS√ÉO OBRIGAT√ìRIA",
        description="**Revise e valide os metadados gerados antes do upload:**",
        color=0xff9900
    )
    
    embed_validacao.add_field(name="üé¨ T√≠tulo Gerado", value=f"```{titulo_original}```", inline=False)
    
    # Mostrar descri√ß√£o de forma organizada
    linhas_descricao = descricao_original.split('\n')
    descricao_preview = ""
    for linha in linhas_descricao[:15]:  # Limitar preview
        if linha.strip():
            descricao_preview += f"{linha}\n"
    
    if len(linhas_descricao) > 15:
        descricao_preview += "...\n*(descri√ß√£o continua)*"
    
    embed_validacao.add_field(name="üìù Descri√ß√£o Gerada", value=f"```{descricao_preview}```", inline=False)
    
    embed_validacao.add_field(
        name="üìã Op√ß√µes de Valida√ß√£o",
        value=(
            "**‚úÖ Aprovar Tudo** - Usar metadados como est√£o\n"
            "**‚úèÔ∏è Editar T√≠tulo** - Modificar apenas o t√≠tulo\n"
            "**üìù Editar Descri√ß√£o** - Modificar apenas a descri√ß√£o\n"
            "**‚ùå Cancelar** - Cancelar upload completamente"
        ),
        inline=False
    )
    
    embed_validacao.add_field(
        name="üóëÔ∏è Aviso Importante",
        value="‚ö†Ô∏è **Ap√≥s o upload bem-sucedido, todos os arquivos deste v√≠deo ser√£o EXCLU√çDOS automaticamente!**",
        inline=False
    )
    
    mensagem_validacao = await ctx.send(embed=embed_validacao, view=view)
    
    # Aguardar decis√£o do usu√°rio
    await view.wait()
    
    titulo_final = titulo_original
    descricao_final = descricao_original
    
    if view.aprovado:
        await ctx.send("‚úÖ **Metadados aprovados!** Continuando com o processo...")
        return titulo_final, descricao_final, True
    
    elif view.editar_titulo:
        await ctx.send("‚úèÔ∏è **Modo de edi√ß√£o de t√≠tulo ativado.** Envie o novo t√≠tulo no chat:")
        
        def check_titulo(m):
            return m.author == ctx.author and m.channel == ctx.channel
        
        try:
            msg_titulo = await bot.wait_for('message', timeout=300, check=check_titulo)
            titulo_final = msg_titulo.content
            await ctx.send(f"‚úÖ **Novo t√≠tulo definido:**\n```{titulo_final}```")
            
            # Perguntar se quer editar a descri√ß√£o tamb√©m
            embed_confirmacao = discord.Embed(
                title="üìù Edi√ß√£o Conclu√≠da",
                description=f"**T√≠tulo atualizado com sucesso!** Deseja editar a descri√ß√£o tamb√©m?",
                color=0x0099ff
            )
            embed_confirmacao.add_field(name="üé¨ Novo T√≠tulo", value=f"```{titulo_final}```", inline=False)
            
            class ConfirmacaoView(ViewComHome):
                def __init__(self, timeout=60):
                    super().__init__(timeout=timeout)
                    self.editar_desc = False
                
                @discord.ui.button(label="‚úÖ Manter Descri√ß√£o", style=discord.ButtonStyle.success)
                async def manter_desc(self, interaction: discord.Interaction, button: Button):
                    await interaction.response.send_message("‚úÖ **Descri√ß√£o mantida!** Continuando...", ephemeral=True)
                    self.stop()
                
                @discord.ui.button(label="üìù Editar Descri√ß√£o", style=discord.ButtonStyle.primary)
                async def editar_desc(self, interaction: discord.Interaction, button: Button):
                    self.editar_desc = True
                    await interaction.response.send_message("üìù **Editando descri√ß√£o...**", ephemeral=True)
                    self.stop()
            
            confirm_view = ConfirmacaoView(timeout=60)
            msg_confirm = await ctx.send(embed=embed_confirmacao, view=confirm_view)
            await confirm_view.wait()
            
            if confirm_view.editar_desc:
                await ctx.send("üìÑ **Envie a nova descri√ß√£o no chat:**")
                try:
                    msg_descricao = await bot.wait_for('message', timeout=300, check=check_titulo)
                    descricao_final = msg_descricao.content
                    await ctx.send(f"‚úÖ **Nova descri√ß√£o definida!**")
                except asyncio.TimeoutError:
                    await ctx.send("‚è∞ Tempo esgotado para edi√ß√£o da descri√ß√£o. Mantendo descri√ß√£o original.")
            
            return titulo_final, descricao_final, True
            
        except asyncio.TimeoutError:
            await ctx.send("‚è∞ Tempo esgotado para edi√ß√£o do t√≠tulo. Mantendo t√≠tulo original.")
            return titulo_final, descricao_final, True
    
    elif view.editar_descricao:
        await ctx.send("üìÑ **Modo de edi√ß√£o de descri√ß√£o ativado.** Envie a nova descri√ß√£o no chat:")
        
        def check_descricao(m):
            return m.author == ctx.author and m.channel == ctx.channel
        
        try:
            msg_descricao = await bot.wait_for('message', timeout=300, check=check_descricao)
            descricao_final = msg_descricao.content
            await ctx.send(f"‚úÖ **Nova descri√ß√£o definida com sucesso!**")
            return titulo_final, descricao_final, True
            
        except asyncio.TimeoutError:
            await ctx.send("‚è∞ Tempo esgotado para edi√ß√£o da descri√ß√£o. Mantendo descri√ß√£o original.")
            return titulo_final, descricao_final, True
    
    else:
        await ctx.send("‚ùå **Upload cancelado pelo usu√°rio.**")
        return None, None, False

async def processar_video_selecionado(ctx, nome_arquivo, video_info):
    """Processa um v√≠deo selecionado por rea√ß√£o - VERS√ÉO COM VERIFICA√á√ÉO DE ARQUIVOS OBRIGAT√ìRIOS"""
    global ultima_mensagem_status
    
    await ctx.send(f"üîÑ Processando `{nome_arquivo}`...")
    
    # VERIFICA√á√ÉO OBRIGAT√ìRIA DE ARQUIVOS
    await mostrar_status_arquivos(ctx, video_info)
    
    # Verificar e solicitar arquivos obrigat√≥rios faltantes
    arquivos_ok = await verificar_arquivos_obrigatorios(ctx, video_info)
    if not arquivos_ok:
        await ctx.send("‚ùå **Processo cancelado.** Arquivos obrigat√≥rios n√£o foram fornecidos.")
        return
    
    # Mostrar status final dos arquivos
    await ctx.send("‚úÖ **Todos os arquivos obrigat√≥rios est√£o presentes!** Continuando com o processamento...")
    
    # Extrair informa√ß√µes do arquivo
    nome_arquivo_video = os.path.basename(video_info.get('video', ''))
    nome_jogo, numero_episodio = extrair_info_arquivo(nome_arquivo_video)
    
    embed_info = discord.Embed(
        title="üîç Informa√ß√µes Detectadas do Arquivo",
        color=0x0099ff
    )
    embed_info.add_field(name="üéÆ Nome do Jogo", value=nome_jogo, inline=True)
    embed_info.add_field(name="üì∫ Epis√≥dio", value=numero_episodio if numero_episodio else "N√£o detectado", inline=True)
    embed_info.add_field(name="üìÅ Arquivo", value=nome_arquivo_video, inline=False)
    
    mensagem_info = await ctx.send(embed=embed_info)
    ultima_mensagem_status = mensagem_info
    
    # Ler contexto
    contexto = f"Jogo: {nome_jogo}"
    if numero_episodio:
        contexto += f" | Epis√≥dio: {numero_episodio}"
    
    if 'contexto' in video_info:
        try:
            with open(video_info['contexto'], 'r', encoding='utf-8') as f:
                contexto_adicional = f.read()
            contexto += f"\nContexto Adicional: {contexto_adicional}"
            await ctx.send("üìÑ Contexto adicional carregado com sucesso.")
        except Exception as e:
            await ctx.send(f"‚ö†Ô∏è Erro ao ler contexto adicional: {e}")
    
    # Gerar metadados com DeepSeek
    await ctx.send("üß† Gerando t√≠tulo e descri√ß√£o otimizados para gameplay...")
    titulo_gerado, descricao_gerada = await gerar_metadados_deepseek(contexto, nome_jogo, numero_episodio)
    
    # Valida√ß√£o humana dos metadados
    titulo_final, descricao_final, continuar = await processar_edicao_metadados(ctx, video_info, titulo_gerado, descricao_gerada)
    
    if not continuar:
        return
    
    # Mostrar preview final
    embed_final = discord.Embed(
        title="üìã Metadados Finais - Confirmados",
        description="**Metadados que ser√£o usados no upload:**",
        color=0x00ff00
    )
    embed_final.add_field(name="üé¨ T√≠tulo Final", value=f"```{titulo_final}```", inline=False)
    
    # Mostrar parte da descri√ß√£o final
    linhas_desc = descricao_final.split('\n')
    desc_preview = "\n".join(linhas_desc[:10])
    if len(linhas_desc) > 10:
        desc_preview += "\n\n... (continua)"
    
    embed_final.add_field(name="üìù Descri√ß√£o Final", value=f"```{desc_preview}```", inline=False)
    
    embed_final.add_field(
        name="üóëÔ∏è Aviso Final",
        value="‚ö†Ô∏è **Lembre-se:** Ap√≥s o upload bem-sucedido, todos os arquivos deste v√≠deo ser√£o **exclu√≠dos automaticamente**!",
        inline=False
    )
    
    mensagem_final = await ctx.send(embed=embed_final)
    ultima_mensagem_status = mensagem_final
    
    # Confirma√ß√£o de upload
    confirm_msg = await ctx.send("‚ö†Ô∏è **Como deseja publicar?**\n\n‚ñ∂Ô∏è Publica√ß√£o Imediata\nüìÖ Agendar Publica√ß√£o\n‚ùå Cancelar")
    ultima_mensagem_status = confirm_msg
    
    await confirm_msg.add_reaction('‚ñ∂Ô∏è')  # Imediato
    await confirm_msg.add_reaction('üìÖ')  # Agendar
    await confirm_msg.add_reaction('‚ùå')  # Cancelar
    
    def check_confirmacao(reaction, user):
        return user == ctx.author and str(reaction.emoji) in ['‚ñ∂Ô∏è', 'üìÖ', '‚ùå'] and reaction.message.id == confirm_msg.id
    
    try:
        reaction, user = await bot.wait_for('reaction_add', timeout=TIMEOUT_INTERACOES, check=check_confirmacao)
        
        if str(reaction.emoji) == '‚ùå':
            await ctx.send("‚ùå Upload cancelado.")
            return
            
        elif str(reaction.emoji) == '‚ñ∂Ô∏è':
            agendar = "imediato"
            
        elif str(reaction.emoji) == 'üìÖ':
            # Mostrar caixa de sele√ß√£o para agendamento
            opcoes_agendamento = gerar_opcoes_agendamento()
            
            embed_agendamento = discord.Embed(
                title="üìÖ Selecione a Data de Publica√ß√£o",
                description="**24 dias de op√ß√µes** dispon√≠veis, sempre ao **meio-dia** üïõ\n\nEscolha uma data abaixo:",
                color=0xff9900
            )
            
            embed_agendamento.add_field(
                name="üöÄ Publica√ß√£o Imediata",
                value="O v√≠deo ser√° publicado assim que o upload terminar",
                inline=False
            )
            
            embed_agendamento.add_field(
                name="üìÖ Pr√≥ximos Dias",
                value="Selecione uma data futura para agendamento autom√°tico",
                inline=False
            )
            
            embed_agendamento.set_footer(text="A publica√ß√£o ocorrer√° sempre √†s 12:00 para melhor engajamento")
            
            view = AgendamentoView(opcoes_agendamento, timeout=TIMEOUT_INTERACOES)
            mensagem_agendamento = await ctx.send(embed=embed_agendamento, view=view)
            ultima_mensagem_status = mensagem_agendamento
            
            # Aguardar a sele√ß√£o
            await view.wait()
            
            if view.agendamento_selecionado is None:
                await ctx.send("‚è∞ Tempo esgotado para sele√ß√£o de agendamento.")
                return
            
            agendar = view.agendamento_selecionado
            
            if agendar == "imediato":
                await ctx.send("üöÄ **Publica√ß√£o Imediata** selecionada")
            else:
                await ctx.send(f"üìÖ **Agendamento confirmado:** `{agendar}`")
        
        # ADICIONAR √Ä FILA em vez de fazer upload imediato
        tarefa = await adicionar_na_fila(
            ctx,
            video_info,
            titulo_final,
            descricao_final,
            video_info.get('thumb'),
            agendar
        )
        
        # OFERECER PR√ìXIMO PASSO AP√ìS ADICIONAR √Ä FILA
        await asyncio.sleep(1)  # Pequena pausa para melhor UX
        await oferecer_proximo_passo(ctx)
            
    except asyncio.TimeoutError:
        await ctx.send(f"‚è∞ Tempo esgotado ({TIMEOUT_INTERACOES//60} minutos). Opera√ß√£o cancelada.")

# Executar o bot
if __name__ == "__main__":
    # Verificar se a pasta de v√≠deos existe
    if not os.path.exists(PASTA_VIDEOS):
        os.makedirs(PASTA_VIDEOS)
        print(f"üìÅ Pasta criada: {PASTA_VIDEOS}")
    
    print("üöÄ Iniciando bot de automa√ß√£o YouTube...")
    print(f"üì¢ Canal do Discord: {CANAL_DISCORD_ID}")
    print(f"‚è±Ô∏è Timeout de intera√ß√µes: {TIMEOUT_INTERACOES} segundos ({TIMEOUT_INTERACOES//60} minutos)")
    print("üîÑ Sistema de fila de uploads ativado")
    print("üéØ Fluxo cont√≠nuo implementado - Sempre oferece pr√≥ximo passo")
    print("üîß Verifica√ß√£o de arquivos obrigat√≥rios implementada")
    print("üè† Bot√£o Home adicionado em todas as p√°ginas")
    print("üóëÔ∏è Limpeza autom√°tica de arquivos ap√≥s upload")
    print("üìÑ Contexto e Thumbnail s√£o OBRIGAT√ìRIOS para cada v√≠deo")
    print("üí° Use os bot√µes no canal ou comandos ! para interagir")
    
    try:
        bot.run(DISCORD_BOT_TOKEN)
    except discord.LoginFailure:
        print("‚ùå Token do Discord inv√°lido. Verifique a vari√°vel DISCORD_BOT_TOKEN no arquivo .env")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar bot: {e}")